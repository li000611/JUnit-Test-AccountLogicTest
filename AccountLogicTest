package logic;

import static org.junit.jupiter.api.Assertions.assertEquals;

import entity.Account;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static junit.framework.Assert.assertTrue;
import org.apache.catalina.Context;
import org.apache.catalina.startup.Tomcat;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 *
 * @author Min Li
 */
class AccountLogicTest {

    private static Tomcat tomcat;
    private AccountLogic logic;
    private Map<String, String[]> sampleMap;

    @BeforeAll
    final static void setUpBeforeClass() throws Exception {
        System.out.println(new File("src\\main\\webapp\\").getAbsolutePath());
        tomcat = new Tomcat();
        tomcat.enableNaming();
        tomcat.setPort(8080);
        Context context = tomcat.addWebapp("/WebScraper", new File("src\\main\\webapp").getAbsolutePath());
        context.addApplicationListener("dal.EMFactory");
        tomcat.init();
        tomcat.start();
    }

    @AfterAll
    final static void tearDownAfterClass() throws Exception {
        tomcat.stop();
    }

    @BeforeEach
    final void setUp() throws Exception {
        logic = new AccountLogic();
        /*HashMap implements interface Map. Map is generic, it has two parameters, first is the Key (in our case String) and second is Value (in our case String[])*/
        sampleMap = new HashMap<>();
        /*Map stores date based on the idea of dictionaries. Each value is associated with a key. Key can be used to get a value very quickly*/
        sampleMap.put(AccountLogic.DISPLAY_NAME, new String[]{"Junit 5 Test"});
        /*Map::put is used to store a key and a value inside of a map and Map::get is used to retrieve a value using a key.*/
        sampleMap.put(AccountLogic.USER, new String[]{"junit"});
        /*In this case we are using static values stored in AccoundLogic which represent general names for Account Columns in DB to store values in Map*/
        sampleMap.put(AccountLogic.PASSWORD, new String[]{"junit5"});
        /*This account has Display Name: "Junit 5 Test", User: "junit", and Password: "junit5"*/
    }

    @AfterEach
    final void tearDown() throws Exception {
    }

    @Test
    final void testGetAll() {
        //get all the accounts from the DB
        List<Account> list = logic.getAll();
//store the size of list/ this way we know how many accounts exits in DB
        int originalSize = list.size();

//create a new Account and save it so we can delete later
        Account testAccount = logic.createEntity(sampleMap);
//add the newly created account to DB
        logic.add(testAccount);

//get all the accounts again
        list = logic.getAll();
//the new size of accounts must be 1 larger than original size
        assertEquals(originalSize + 1, list.size());

//delete the new account, so DB is reverted back to it original form
        logic.delete(testAccount);

//get all accounts again
        list = logic.getAll();
//the new size of accounts must be same as original size
        assertEquals(originalSize, list.size());
    }

    @Test
    final void testGetWithId() {
        List<Account> account = logic.getAll();
        Account testAc = account.get(0);
        Account returnedAc = logic.getWithId(testAc.getId());
        assertEquals(testAc.getId(), returnedAc.getId());
        assertEquals(testAc.getUser(), returnedAc.getUser());
        assertEquals(testAc.getDisplayName(), returnedAc.getDisplayName());
        assertEquals(testAc.getPassword(), returnedAc.getPassword());
    }

    @Test
    final void testGetAccountWithDisplayName() {
        List<Account> account = logic.getAll();
        Account testAc = account.get(0);
        Account returnedAc = logic.getAccountWithDisplayName(testAc.getDisplayName());
        assertEquals(testAc.getId(), returnedAc.getId());
        assertEquals(testAc.getUser(), returnedAc.getUser());
        assertEquals(testAc.getDisplayName(), returnedAc.getDisplayName());
        assertEquals(testAc.getPassword(), returnedAc.getPassword());
    }

    @Test
    final void testGetAccountWithUser() {
        List<Account> account = logic.getAll();
        Account testAc = account.get(0);
        Account returnedAc = logic.getAccountWIthUser(testAc.getUser());
        assertEquals(testAc.getId(), returnedAc.getId());
        assertEquals(testAc.getUser(), returnedAc.getUser());
        assertEquals(testAc.getDisplayName(), returnedAc.getDisplayName());
        assertEquals(testAc.getPassword(), returnedAc.getPassword());
    }

    @Test
    final void testGetAccountsWithPassword() {
        List<Account> list = logic.getAll();
        Account testAc = list.get(0);
        List<Account> passwordlist = logic.getAccountsWithPassword(testAc.getPassword());
        for (Account accounts : passwordlist) {
            assertEquals(testAc.getPassword(), accounts.getPassword());
        }
    }

    @Test
    final void testGetAccountWith() {
        List<Account> account = logic.getAll();
        Account testAcc = account.get(0);
        Account returnedAc = logic.getAccountWith(testAcc.getUser(), testAcc.getPassword());
        assertEquals(testAcc.getId(), returnedAc.getId());
        assertEquals(testAcc.getUser(), returnedAc.getUser());
        assertEquals(testAcc.getDisplayName(), returnedAc.getDisplayName());
        assertEquals(testAcc.getPassword(), returnedAc.getPassword());

    }

    @Test
    final void testSearch() {
        Account test = logic.createEntity(sampleMap);
        List<Account> ss = logic.search("letter");
        for (Account accounts : ss) {
            assertTrue(accounts.getDisplayName().contains("letter")||accounts.getUser().contains("letter"));
        }
    }

    @Test
    final void testCreateEntity() {
        Account test = logic.createEntity(sampleMap);
        logic.add(test);
        Account returnedAc = logic.getAccountWith(test.getUser(), test.getPassword());
        assertEquals(test.getId(), returnedAc.getId());
        assertEquals(test.getUser(), returnedAc.getUser());
        assertEquals(test.getDisplayName(), returnedAc.getDisplayName());
        assertEquals(test.getPassword(), returnedAc.getPassword());
        logic.delete(test);
    }

    @Test
    final void testGetColumnNames() {
        List<String> entityList = logic.getColumnNames();
        assertEquals(entityList.get(0), "ID");
        assertEquals(entityList.get(1), "Display Name");
        assertEquals(entityList.get(2), "User");
        assertEquals(entityList.get(3), "Password");

    }

    @Test
    final void testGetColumnCodes() {
        List<String> entityList = logic.getColumnCodes();
        assertEquals(entityList.get(0), "id");
        assertEquals(entityList.get(1), "displayName");
        assertEquals(entityList.get(2), "user");
        assertEquals(entityList.get(3), "password");

    }

    @Test
    final void testExtraDataAsList() {     
          List<Account> account = logic.getAll();
        List<?> ss = logic.extractDataAsList(account.get(0));
        assertEquals(1,ss.get(0));
        assertEquals("CST8288",ss.get(1));
        assertEquals("cst8288",ss.get(2));
        assertEquals("cst8288",ss.get(3));
    }
}

